"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["206778"],{763795:function(e,n,s){s.r(n),s.d(n,{default:()=>u,frontMatter:()=>a,metadata:()=>r,assets:()=>o,toc:()=>c,contentTitle:()=>i});var r=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/json-functions/to-json","title":"TO_JSON","description":"\x3c!--","source":"@site/docs/sql-manual/sql-functions/scalar-functions/json-functions/to-json.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/json-functions","slug":"/sql-manual/sql-functions/scalar-functions/json-functions/to-json","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/to-json","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"TO_JSON","language":"en"}}'),l=s("785893"),t=s("250065");let a={title:"TO_JSON",language:"en"},i=void 0,o={},c=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic scalar values",id:"basic-scalar-values",level:3},{value:"Array conversion",id:"array-conversion",level:3},{value:"Accessing array elements in resulting JSON",id:"accessing-array-elements-in-resulting-json",level:3},{value:"Struct conversion",id:"struct-conversion",level:3},{value:"Accessing object properties in resulting JSON",id:"accessing-object-properties-in-resulting-json",level:3},{value:"Handling NULL values",id:"handling-null-values",level:3},{value:"Unsupported Doris Types",id:"unsupported-doris-types",level:3},{value:"Notes",id:"notes",level:2}];function d(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,l.jsx)(n.p,{children:"Converts Doris internal data types to JSONB type. This function allows for converting compatible Doris data types into JSON representation without precision loss."}),"\n",(0,l.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"TO_JSON(value)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"value"})," - The value to be converted to JSONB type. The following Doris data types are supported:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,l.jsx)(n.li,{children:"Boolean type: BOOLEAN"}),"\n",(0,l.jsx)(n.li,{children:"String type: STRING, VARCHAR"}),"\n",(0,l.jsx)(n.li,{children:"Complex types: ARRAY, STRUCT"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Types not listed above (like DATE, DATETIME, etc.) are not supported directly and must be first converted to supported types (typically STRING)."}),"\n",(0,l.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,l.jsx)(n.p,{children:"Returns a value of JSONB type."}),"\n",(0,l.jsxs)(n.p,{children:["When the input ",(0,l.jsx)(n.code,{children:"value"})," is SQL NULL, the function returns SQL NULL (not a JSON null value). When NULL values appear within arrays or structs, they are converted to JSON null values."]}),"\n",(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(n.h3,{id:"basic-scalar-values",children:"Basic scalar values"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'SELECT to_json(1), to_json(3.14), to_json("12345");\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+------------+---------------+------------------+\n| to_json(1) | to_json(3.14) | to_json("12345") |\n+------------+---------------+------------------+\n| 1          | 3.14          | "12345"          |\n+------------+---------------+------------------+\n'})}),"\n",(0,l.jsx)(n.h3,{id:"array-conversion",children:"Array conversion"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT to_json(array(array(1,2,3),array(4,5,6)));\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"+-------------------------------------------+\n| to_json(array(array(1,2,3),array(4,5,6))) |\n+-------------------------------------------+\n| [[1,2,3],[4,5,6]]                         |\n+-------------------------------------------+\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT to_json(array(12,34,null));\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"+----------------------------+\n| to_json(array(12,34,null)) |\n+----------------------------+\n| [12,34,null]               |\n+----------------------------+\n"})}),"\n",(0,l.jsx)(n.h3,{id:"accessing-array-elements-in-resulting-json",children:"Accessing array elements in resulting JSON"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT json_extract(to_json(array(array(1,2,3),array(4,5,6))), '$.[1].[2]');\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"+----------------------------------------------------------------------+\n| json_extract(to_json(array(array(1,2,3),array(4,5,6))), '$.[1].[2]') |\n+----------------------------------------------------------------------+\n| 6                                                                    |\n+----------------------------------------------------------------------+\n"})}),"\n",(0,l.jsx)(n.h3,{id:"struct-conversion",children:"Struct conversion"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'SELECT to_json(struct(123,array(4,5,6),"789"));\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+------------------------------------------+\n| to_json(struct(123,array(4,5,6),"789"))  |\n+------------------------------------------+\n| {"col1":123,"col2":[4,5,6],"col3":"789"} |\n+------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.h3,{id:"accessing-object-properties-in-resulting-json",children:"Accessing object properties in resulting JSON"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'SELECT json_extract(to_json(struct(123,array(4,5,6),"789")),"$.col2");\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+----------------------------------------------------------------+\n| json_extract(to_json(struct(123,array(4,5,6),"789")),"$.col2") |\n+----------------------------------------------------------------+\n| [4,5,6]                                                        |\n+----------------------------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.h3,{id:"handling-null-values",children:"Handling NULL values"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"-- SQL NULL as input returns SQL NULL\nSELECT to_json(null);\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"+---------------+\n| to_json(null) |\n+---------------+\n| NULL          |\n+---------------+\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"-- NULL values within arrays become JSON null values\nSELECT to_json(array(12,34,null));\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"+----------------------------+\n| to_json(array(12,34,null)) |\n+----------------------------+\n| [12,34,null]               |\n+----------------------------+\n"})}),"\n",(0,l.jsx)(n.h3,{id:"unsupported-doris-types",children:"Unsupported Doris Types"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT to_json(makedate(2025,5));\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"ERROR 1105 (HY000): errCode = 2, detailMessage = Can not find the compatibility function signature: to_json(DATE)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"-- Convert to string first and then apply to_json\nSELECT to_json(cast(makedate(2025,5) as string));\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+-------------------------------------------+\n| to_json(cast(makedate(2025,5) as string)) |\n+-------------------------------------------+\n| "2025-01-05"                              |\n+-------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Some types do not have direct JSON mapping (like DATE). For these types, you need to convert them to STRING first, then use ",(0,l.jsx)(n.code,{children:"TO_JSON"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["When converting Doris internal types to JSONB using ",(0,l.jsx)(n.code,{children:"TO_JSON"}),", there is no precision loss, unlike when converting through text representation."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["JSONB objects in Doris have a size limitation of 1,048,576 bytes (1 MB) by default, which can be adjusted through the BE configuration ",(0,l.jsx)(n.code,{children:"string_type_length_soft_limit_bytes"})," up to 2,147,483,643 bytes (approximately 2 GB)."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"In Doris JSON objects, keys cannot exceed 255 bytes in length."}),"\n"]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return i},a:function(){return a}});var r=s(667294);let l={},t=r.createContext(l);function a(e){let n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);